<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on 嵐の小舟より</title>
    <link>https://tmrtmhr.info/tags/aws/</link>
    <description>Recent content in Aws on 嵐の小舟より</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 29 Sep 2018 00:47:50 +0900</lastBuildDate>
    
	<atom:link href="https://tmrtmhr.info/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Lambda と Fargate のCPU時間単価および性能比較</title>
      <link>https://tmrtmhr.info/tech/aws-lambda-vs-fargate/</link>
      <pubDate>Sat, 29 Sep 2018 00:47:50 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws-lambda-vs-fargate/</guid>
      <description>&lt;p&gt;東京リージョンでAWSのマネージドコンテナサービス &lt;a href=&#34;https://aws.amazon.com/jp/fargate/pricing/&#34;&gt;Fargateの料金&lt;/a&gt;を見ると
1 vCPU: $0.0632/h, 2GB メモリ: $0.0316/h で、合わせて $0.0948/h です。
一方&lt;a href=&#34;https://aws.amazon.com/jp/lambda/pricing/&#34;&gt;Lambdaの料金&lt;/a&gt;は 2GB メモリ: $0.120024/h です。&lt;/p&gt;

&lt;p&gt;あれ、なんか Fargate 安くないですか？&lt;/p&gt;

&lt;p&gt;本記事はこの料金の違いがどういう理由によるものかの筆者の推測、
および Lambda と Fargate の処理性能の比較について述べるものです。&lt;/p&gt;

&lt;p&gt;結論をまず言うと以下のようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 vCPU 2GB の Fargate と 2GB の Lambda であれば Fargate のほうが速い&lt;/li&gt;
&lt;li&gt;Fargate のほうが安いのはAPIサーバなどの用途で冗長性を持たせようとすると CPU を100%使えないから&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>API Gateway の &#39;Unable to base64 decode the body&#39; エラー</title>
      <link>https://tmrtmhr.info/tech/aws/error-on-api-gateway-unable-to-base64-decode-the-body/</link>
      <pubDate>Sat, 17 Feb 2018 01:02:32 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/error-on-api-gateway-unable-to-base64-decode-the-body/</guid>
      <description>&lt;p&gt;とある事情で S3 に HTML を置き、 CloudFront から API Gateway 経由(AWSサービス統合)でアクセスしたときの話です。
500 エラーが返ってくるので CloudWatch のログを見てみると、
S3 からは正常に取得できているようでしたが、
最後に以下のようなエラーが出ていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Execution failed due to configuration error: Unable to base64 decode the body.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやら Base64 デコードをしようとして失敗しているようです。
結果的に AWS 統合から Lambda 統合に変えて S3 オブジェクトを取得するようにしたら直ったのですが、
こういう挙動をする理由についての公式ドキュメントなどは見つけられていません。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>API Gateway から名前にドットを含む S3 バケットへアクセスしたときの SSL 証明書エラー</title>
      <link>https://tmrtmhr.info/tech/aws/s3-ssl-error-on-api-gateway/</link>
      <pubDate>Sat, 27 Jan 2018 17:27:31 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/s3-ssl-error-on-api-gateway/</guid>
      <description>&lt;p&gt;API Gateway では統合リクエストのところで&amp;rdquo;AWS サービス&amp;rdquo;として設定することで
S3 のデータを読み書きするようにできます。&lt;/p&gt;

&lt;p&gt;たとえば以下のように設定することで S3 オブジェクトを GET することができます。
API Gateway のカスタムオーサライザ機能でのちのち認証を追加したりできるので、
とりあえず間に API Gateway をはさんでおくと便利です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS サービス： S3&lt;/li&gt;
&lt;li&gt;AWS サブドメイン： バケット名&lt;/li&gt;
&lt;li&gt;HTTP メソッド： &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;パス上書き： &lt;code&gt;/path/to/resource&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここで、バケット名にドット(&lt;code&gt;.&lt;/code&gt;)を含む場合は注意が必要です。
バケット名が &lt;code&gt;my.bucket.domain&lt;/code&gt; のようになっていると、
S3 へのアクセスの際に &lt;code&gt;https://my.bucket.domain.s3.amazonaws.com&lt;/code&gt; というドメインが使われ、
S3 側では &lt;code&gt;*.s3.amazonaws.com&lt;/code&gt; という SSL 証明書を用いているため &lt;code&gt;my.bucket.domain&lt;/code&gt; のような多段階のサブドメインにマッチせず、
怒られます。&lt;/p&gt;

&lt;p&gt;そんなわけで、ドメイン名にドットを含む場合は以下のように設定する必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS サブドメイン： 空欄&lt;/li&gt;
&lt;li&gt;パス上書き： &lt;code&gt;my.bucket.domain/path/to/resource&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人的には、トラブルが起きがちなドット混じりのバケット名は避けようかな、という気持ちになってきました。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://stackoverflow.com/questions/26744696/ssl-multilevel-subdomain-wildcard&#34;&gt;SSL Multilevel Subdomain Wildcard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>API Gateway で 502 Internal Server Error が出たときにすること</title>
      <link>https://tmrtmhr.info/tech/aws/502-error-on-api-gateway/</link>
      <pubDate>Sat, 27 Jan 2018 16:54:01 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/502-error-on-api-gateway/</guid>
      <description>&lt;p&gt;API Gateway にカスタムオーサライザを設定して新しいステージ作って……
とやっていたときに &amp;ldquo;502 Internal Server Error&amp;rdquo; が出ました。&lt;/p&gt;

&lt;p&gt;こんな時はとりあえずログを見ましょう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ステージ選択 &amp;gt; ログ のタブから Cloud Watch ログを有効にして実行ログを出力&lt;/li&gt;
&lt;li&gt;Cloud Watch のログから &amp;ldquo;API-Gateway-Execution-Logs_xxx&amp;rdquo; という名前のものを見る&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;自分のケースでは、呼ぶ Lambda をステージ変数によって切り替えていましたが、
新しいステージではこの変数が未設定だったことによりエラーとなっていました。&lt;/p&gt;

&lt;p&gt;まあこういうミスが起こりうるので諸々の作業はなるべく自動化しましょうという戒めとして
ここにメモしておきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS Lambda で xmlsec を利用する</title>
      <link>https://tmrtmhr.info/tech/aws/using-xmlsec-on-lambda/</link>
      <pubDate>Sun, 03 Dec 2017 16:41:17 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/using-xmlsec-on-lambda/</guid>
      <description>&lt;p&gt;AWS Lambda 上で、署名された XML 文書の検証をしたい、とふと思いました。
もっと言うと SAML2 のサービスプロバイダとして AuthResponse の検証を
サーバレスでやってみよう、というところから出発して、
まずは XML 文書の署名が検証できないことにはお話になりませんね、ということです。&lt;/p&gt;

&lt;p&gt;本記事は以下のことをやるための手順メモです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apex/apex&#34;&gt;apex&lt;/a&gt;、&lt;a href=&#34;https://github.com/apex/go-apex&#34;&gt;go-apex&lt;/a&gt;、&lt;a href=&#34;https://github.com/crewjam/go-xmlsec&#34;&gt;go-xmlsec&lt;/a&gt; を使って GO 言語でプログラムを書く&lt;/li&gt;
&lt;li&gt;xmlsec を静的リンクしたバイナリを作る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;より一般的には、AWS Lambda の実行環境に入っていないネイティブライブラリを使いたい場合は静的リンクして持ち込む、という話です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS Lambda 上で AWS CLI を動かして S3 sync する</title>
      <link>https://tmrtmhr.info/tech/aws/awscli-on-lambda/</link>
      <pubDate>Sun, 03 Dec 2017 16:11:45 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/awscli-on-lambda/</guid>
      <description>&lt;p&gt;発端は S3 バケット間を &lt;code&gt;sync&lt;/code&gt; したいという要件です。
基本は日次実行ですが、アドホックな実行もサポートしたいので、
コピー元の特定ファイルアップロードをトリガーに Lambda で &lt;code&gt;aws s3 sync&lt;/code&gt; できるとうれしいのです。&lt;/p&gt;

&lt;p&gt;AWS Lambda の実行環境には AWS CLI が用意されていません。
まあ外部プロセス呼び出しでコマンドを実行して……とかやろうとするためには
実行環境に何のコマンドが入っているか気にかけなければいけなくなるので、
自分たちの機能コードだけ持ちこめばいいという Lambda の思想にも反すると思います。
コンテナも肥大化しますし。
そんなわけで AWS Lambda の実行環境に AWS CLI が用意されることは将来的にも望み薄でしょう。&lt;/p&gt;

&lt;p&gt;じゃあ SDK で実装するか……とざっと調べたところ AWS SDK には &lt;code&gt;s3 sync&lt;/code&gt; がありません(ないよね？)。
したがって、差分だけアップロードするとか、コピー元で削除されているものはコピー先でも削除するなどの機能は、
SDK を使って自分たちで再実装するなどしないといけません。&lt;/p&gt;

&lt;p&gt;それはちょっとねぇ……というわけで紆余曲折あって作成した AWS Lambda 上で AWS CLI を実行できるパッケージ(&lt;a href=&#34;https://github.com/tmrtmhr/awscli-on-lambda&#34;&gt;awscli-on-lambda&lt;/a&gt;)を置いておきます。&lt;/p&gt;

&lt;p&gt;注意点ですが、このパッケージは Lambda の実行環境が変更されることでいきなり動かなくなる可能性があります。
たとえば、&lt;code&gt;aws&lt;/code&gt; コマンドが &lt;code&gt;/usr/bin/python&lt;/code&gt; を見に行くため、このへんを変更されるとアウトです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SPA(シングルページアプリケーション)をS3で動かす</title>
      <link>https://tmrtmhr.info/tech/aws/single-page-application-on-s3/</link>
      <pubDate>Thu, 09 Nov 2017 10:07:21 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/single-page-application-on-s3/</guid>
      <description>&lt;p&gt;静的コンテンツについては S3 だけでサーブできます。
ですので、たとえば&lt;a href=&#34;https://angular.io/&#34;&gt;Angular&lt;/a&gt;で作成したフロントエンドのコードは S3 に置けばいいよ、という話になります。&lt;/p&gt;

&lt;p&gt;しかし Single Page Application の場合、表示内容とともに URL を書き換えます。
なので &lt;code&gt;https://example.com/blog&lt;/code&gt; のような URL でページが表示されていたとしても、
対応するファイルがないためブラウザリロードすると &lt;code&gt;404&lt;/code&gt; エラーになってしまいます。
認証が必要で、別ページに callback URL を持って遷移して認証後に戻ってくる、みたいなケースでもこのことが問題になります。&lt;/p&gt;

&lt;p&gt;調べてみると以下のやり方が良いようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CloudFront のカスタムエラーレスポンスで、S3 の &lt;code&gt;404&lt;/code&gt; エラーに対し &lt;code&gt;/index.html&lt;/code&gt; へ転送するよう設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;英語ですが、以下のブログにスクリーンショット付きで手順が載っていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考：&lt;a href=&#34;https://keita.blog/2015/11/24/hosting-a-single-page-app-on-s3-with-proper-urls/&#34;&gt;Hosting a Single-Page App on S3, with proper URLs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS Lambda (Node.js v6.10) から DynamoDB に入れた Gzip バイナリデータを展開する</title>
      <link>https://tmrtmhr.info/tech/aws/using-binary-data-in-dynamodb/</link>
      <pubDate>Tue, 11 Apr 2017 21:37:09 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/using-binary-data-in-dynamodb/</guid>
      <description>&lt;p&gt;AWS DynamoDB では指定した IO 性能に応じて料金が発生するため、
クエリなどで使用しないプロパティについては gzip 圧縮などを施してバイナリデータとして格納したほうが、
必要な IO 性能が少なくなるためお得です(参考：&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/GuidelinesForItems.html#GuidelinesForItems.CompressingLargeAttributeValues&#34;&gt;大量の属性値を圧縮する&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;本記事は、AWS Lambda (Node.js 6.10) から DynamoDB のデータを取得し、
展開する処理のメモです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GO言語で雛形JSONの内容をコマンド出力の内容で置換する</title>
      <link>https://tmrtmhr.info/tech/replace-a-part-of-json-with-command-output/</link>
      <pubDate>Tue, 14 Mar 2017 18:04:09 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/replace-a-part-of-json-with-command-output/</guid>
      <description>&lt;p&gt;AWS CLI によりコマンドラインから制御したりする際、リクエストパラメータとして JSON ファイルが必要になることがあります。
&lt;a href=&#34;https://tmrtmhr.info/tech/aws/delete-updated-file-cache-on-cloudfront/&#34;&gt;CloudFront のキャッシュを削除したいとき&lt;/a&gt;なんかがそうです。&lt;/p&gt;

&lt;p&gt;AWS CLI のコマンドごとに、リクエストJSONを生成する専用スクリプトを書くという手もありますが、
シェル上でパイプやらリダイレクトやらを駆使していい感じに JSON を生成できるある程度汎用的なスクリプトにならんものか、
という思いから試してみた結果をここに記します。
どこかに既にあるものでしたらすみません。&lt;/p&gt;

&lt;p&gt;コマンド引数は以下のようになっていて、JSON ファイルは標準入力から与えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filljson ${入力の型} ${キーパス} ${入力ファイル名}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;標準入出力で JSON をやりとりするので以下のようにパイプでつなげることで
中間ファイルを作ることなく最終的なリクエスト JSON が得られます。
入力ファイル名のところには &lt;code&gt;bash&lt;/code&gt; や &lt;code&gt;zsh&lt;/code&gt; のプロセス置換機能を利用しています。
プロセス置換機能を使うとプログラム側からは単にファイルパスが渡ってくるように見えるので、
ファイルIOとして処理すればOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat json/cloudfront-invalidation.json |
  filljson int InvalidationBatch.Paths.Quantity &amp;lt;(git diff --ignore-all-space --diff-filter=M --name-only HEAD^ HEAD  public | wc -l) |
  filljson [string] InvalidationBatch.Paths.Items &amp;lt;(git diff --ignore-all-space --diff-filter=M --name-only HEAD^ HEAD  public | sed -e &#39;s/^public//g&#39;) |
  filljson string InvalidationBatch.CallerReference &amp;lt;(date +&amp;quot;osone3-%Y/%m/%d-%H:%k:%m&amp;quot; | tr -d &#39;\n&#39;) |
  jq . &amp;gt; request.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git diff を利用して更新のあったファイルのみ CloudFront のキャッシュを削除する</title>
      <link>https://tmrtmhr.info/tech/aws/delete-updated-file-cache-on-cloudfront/</link>
      <pubDate>Tue, 14 Mar 2017 17:15:21 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/delete-updated-file-cache-on-cloudfront/</guid>
      <description>&lt;p&gt;本サイトは Hugo で生成したものを GitHub Pages に push して公開し、
CloudFront を利用して配信しています。
CloudFront はキャッシュサーバとして働くので、
何もしなければ TTL が切れるまでは古いコンテンツが表示されます。&lt;/p&gt;

&lt;p&gt;単純にキャッシュ全削除という手もありますが、
せっかくなので更新のあったファイルのみキャッシュを削除してみました。&lt;/p&gt;

&lt;p&gt;やっていることは以下のような感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt; で更新のあったファイル一覧を取得&lt;/li&gt;
&lt;li&gt;一覧を加工して AWS CLI 用の JSON ファイルを生成&lt;/li&gt;
&lt;li&gt;AWS CLI の &lt;code&gt;aws cloudfront create-invalidation&lt;/code&gt; でキャッシュ削除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ブログに使うドメインを AWS で取得する</title>
      <link>https://tmrtmhr.info/tech/aws/register-a-domain-for-blog/</link>
      <pubDate>Tue, 14 Mar 2017 17:03:40 +0900</pubDate>
      
      <guid>https://tmrtmhr.info/tech/aws/register-a-domain-for-blog/</guid>
      <description>&lt;p&gt;せっかくなので本サイトのドメインを AWS Route53 で管理するようにした際のメモです。&lt;/p&gt;

&lt;p&gt;やったことは以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/jp/route53/&#34;&gt;Route 53&lt;/a&gt; でドメインを取得&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/jp/ses/&#34;&gt;SES&lt;/a&gt; で対象ドメインのメールアドレスにて受信&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/jp/certificate-manager/&#34;&gt;Certificate Manager&lt;/a&gt; で対象ドメインのSSL証明書を取得&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/jp/cloudfront/&#34;&gt;CloudFront&lt;/a&gt; に取得したSSL証明書を設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、今のところ CloudFront のオリジンサーバとしては &lt;a href=&#34;https://aws.amazon.com/jp/s3/&#34;&gt;S3&lt;/a&gt; ではなく &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; を使用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2018/01/08 追記:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificate Manager で SSL証明書を取得する際、
メールではなく DNS レコードによってドメイン所有を検証することが可能になっていました
(&lt;a href=&#34;https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html&#34;&gt;Use DNS to Validate Domain Ownership&lt;/a&gt;)。
なので SSL 証明書の取得の際には SES の設定が不要になっています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>